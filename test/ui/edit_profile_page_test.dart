import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart'; // Illustrative
import 'package:wingmate/models/user_profile.dart';
import 'package:wingmate/services/profile_service.dart';
import 'package:wingmate/services/voice_service.dart';
import 'package:wingmate/ui/edit_profile_page.dart';

// --- Illustrative Manual Mocks (normally generated by Mockito) ---
class MockProfileService extends Mock implements ProfileService {
  @override
  Future<UserProfile> createProfile(UserProfile profile) async {
    super.noSuchMethod(Invocation.method(#createProfile, [profile]), returnValue: Future.value(profile.copyWith(id: DateTime.now().millisecondsSinceEpoch))); // Simulate ID generation
    return profile.copyWith(id: DateTime.now().millisecondsSinceEpoch); // Return with an ID
  }

  @override
  Future<int> updateProfile(UserProfile profile) async {
     super.noSuchMethod(Invocation.method(#updateProfile, [profile]), returnValue: Future.value(1));
    return 1; // Simulate 1 row updated
  }
}

class MockVoiceService extends Mock implements VoiceService {
  List<Map<String, dynamic>> _mockVoices = [];

  void setMockVoices(List<Map<String, dynamic>> voices) {
    _mockVoices = voices;
  }

  @override
  Future<List<Map<String, dynamic>>> fetchVoicesFromApi() async {
    super.noSuchMethod(Invocation.method(#fetchVoicesFromApi, []), returnValue: Future.value(_mockVoices));
    return _mockVoices;
  }
}
// --- End Illustrative Manual Mocks ---

void main() {
  late MockProfileService mockProfileService;
  late MockVoiceService mockVoiceService;

  final tUserProfile = UserProfile(
    id: 1,
    name: 'Existing Profile',
    voiceName: 'voice_short_name_1', // ShortName
    languageCode: 'en-US',
    speechRate: 1.2,
    pitch: 0.8,
  );

  final List<Map<String, dynamic>> tApiVoices = [
    {
      "name": "voice_short_name_1", // ShortName
      "displayName": "Voice Display Name 1 (en-US)",
      "gender": "Female",
      "locale": "en-US",
      "supportedLanguages": "es-US,fr-CA",
    },
    {
      "name": "voice_short_name_2",
      "displayName": "Voice Display Name 2 (de-DE)",
      "gender": "Male",
      "locale": "de-DE",
      "supportedLanguages": "", // None other than primary
    },
     {
      "name": "voice_short_name_3",
      "displayName": "Voice Display Name 3 (fr-FR)",
      "gender": "Female",
      "locale": "fr-FR",
      "supportedLanguages": "fr-CA",
    }
  ];

  setUp(() {
    mockProfileService = MockProfileService();
    mockVoiceService = MockVoiceService();
    // Setup default mock voice list
    when(mockVoiceService.fetchVoicesFromApi()).thenAnswer((_) async => tApiVoices);
    mockVoiceService.setMockVoices(tApiVoices);
  });

  Widget createEditProfilePageWidget({UserProfile? existingProfile}) {
    return MaterialApp(
      home: EditProfilePage(
        profileService: mockProfileService,
        voiceService: mockVoiceService,
        existingProfile: existingProfile,
      ),
    );
  }

  group('EditProfilePage Widget Tests', () {
    group('Create Mode', () {
      testWidgets('initial state of form fields is correct (empty or default)', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget());
        await tester.pumpAndSettle(); // For voice loading

        expect(find.widgetWithText(TextFormField, ''), findsOneWidget); // Name field
        // Verify dropdowns are showing default hint or first item if auto-selected
        // Sliders should be at default values (e.g., 1.0)
        final Slider rateSlider = tester.widget(find.byWidgetPredicate((widget) => widget is Slider && widget.value == 1.0 && widget.min == 0.5 && widget.max == 2.0));
        expect(rateSlider.value, 1.0);
        final Slider pitchSlider = tester.widget(find.byWidgetPredicate((widget) => widget is Slider && widget.value == 1.0 && widget.min == 0.5 && widget.max == 2.0));
        expect(pitchSlider.value, 1.0);
        expect(find.text('Voice Display Name 1 (en-US)'), findsNothing); // No voice selected initially by default
      });

      testWidgets('voice and language dropdowns are populated', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget());
        await tester.pumpAndSettle();

        // Tap to open voice dropdown
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Voice'));
        await tester.pumpAndSettle(); // For dropdown animation

        // Verify voice options are present
        expect(find.text('Voice Display Name 1 (en-US)'), findsOneWidget); // In the dropdown items
        expect(find.text('Voice Display Name 2 (de-DE)'), findsOneWidget);
        expect(find.text('Voice Display Name 3 (fr-FR)'), findsOneWidget);
        await tester.tap(find.text('Voice Display Name 1 (en-US)').last); // Select one
        await tester.pumpAndSettle();

        // Tap to open language dropdown
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Language'));
        await tester.pumpAndSettle();

        // Verify language options for selected voice
        expect(find.text('en-US'), findsOneWidget); // In the dropdown items
        expect(find.text('es-US'), findsOneWidget);
        expect(find.text('fr-CA'), findsOneWidget);
        await tester.tap(find.text('en-US').last); // Select one
        await tester.pumpAndSettle();
      });

      testWidgets('enter valid data and tap Save calls createProfile and pops', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget());
        await tester.pumpAndSettle();

        // Enter name
        await tester.enterText(find.byType(TextFormField), 'New Profile');

        // Select Voice
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Voice'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('Voice Display Name 1 (en-US)').last);
        await tester.pumpAndSettle();

        // Select Language
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Language'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('en-US').last);
        await tester.pumpAndSettle();

        // Adjust sliders (optional, defaults are fine)
        await tester.drag(find.byType(Slider).first, const Offset(50, 0)); // Change rate
        await tester.pumpAndSettle();


        // Tap Save
        await tester.tap(find.byIcon(Icons.save));
        await tester.pumpAndSettle(); // For async save and pop

        // Verify createProfile was called with correct data
        final UserProfile captured = verify(mockProfileService.createProfile(captureAny)).captured.single as UserProfile;
        expect(captured.name, 'New Profile');
        expect(captured.voiceName, 'voice_short_name_1');
        expect(captured.languageCode, 'en-US');
        // We'd need to check captured.speechRate if we knew the exact value from drag

        // Verify Navigator.pop was called (widget is removed from tree)
        expect(find.byType(EditProfilePage), findsNothing);
      });
    });

    group('Edit Mode', () {
      testWidgets('form fields are initialized with existingProfile data', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget(existingProfile: tUserProfile));
        await tester.pumpAndSettle(); // For voice loading & language update

        expect(find.text(tUserProfile.name), findsOneWidget);
        // Check selected value in dropdowns
        // Voice dropdown should show the display name for tUserProfile.voiceName
        expect(find.text('Voice Display Name 1 (en-US)'), findsOneWidget); 
        // Language dropdown should show the language code
        expect(find.text(tUserProfile.languageCode), findsOneWidget); 
        
        final Slider rateSlider = tester.widget(find.byWidgetPredicate((widget) => widget is Slider && widget.min == 0.5 && widget.max == 2.0 && (widget.key as ValueKey).value == 'rate_slider'));
        expect(rateSlider.value, tUserProfile.speechRate);
        
        final Slider pitchSlider = tester.widget(find.byWidgetPredicate((widget) => widget is Slider && widget.min == 0.5 && widget.max == 2.0 && (widget.key as ValueKey).value == 'pitch_slider'));
        expect(pitchSlider.value, tUserProfile.pitch);
      });

      testWidgets('change data and tap Save calls updateProfile and pops', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget(existingProfile: tUserProfile));
        await tester.pumpAndSettle();

        // Change name
        await tester.enterText(find.byType(TextFormField), 'Updated Profile Name');
        // Change voice (optional, could also just change rate/pitch)
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Voice'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('Voice Display Name 2 (de-DE)').last); // Change to voice 2
        await tester.pumpAndSettle();
        // Language should auto-select to de-DE (primary for voice 2)

        // Tap Save
        await tester.tap(find.byIcon(Icons.save));
        await tester.pumpAndSettle();

        // Verify updateProfile was called
        final UserProfile captured = verify(mockProfileService.updateProfile(captureAny)).captured.single as UserProfile;
        expect(captured.id, tUserProfile.id);
        expect(captured.name, 'Updated Profile Name');
        expect(captured.voiceName, 'voice_short_name_2');
        expect(captured.languageCode, 'de-DE');

        // Verify Navigator.pop
        expect(find.byType(EditProfilePage), findsNothing);
      });
    });

    group('Validation', () {
      testWidgets('profile name cannot be empty', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget());
        await tester.pumpAndSettle();

        // Ensure other required fields are selected to isolate name validation
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Voice'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('Voice Display Name 1 (en-US)').last);
        await tester.pumpAndSettle();
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Language'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('en-US').last);
        await tester.pumpAndSettle();

        // Tap Save without entering name
        await tester.tap(find.byIcon(Icons.save));
        await tester.pumpAndSettle();

        // Verify error message
        expect(find.text('Please enter a profile name'), findsOneWidget);
        verifyNever(mockProfileService.createProfile(any));
      });
       testWidgets('voice must be selected', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget());
        await tester.pumpAndSettle();

        await tester.enterText(find.byType(TextFormField), 'Test Name');
        // Do not select a voice

        await tester.tap(find.byIcon(Icons.save));
        await tester.pumpAndSettle();
        
        expect(find.text('Please select a voice'), findsOneWidget);
        verifyNever(mockProfileService.createProfile(any));
      });

      testWidgets('language must be selected if voice is selected and languages available', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget());
        await tester.pumpAndSettle();

        await tester.enterText(find.byType(TextFormField), 'Test Name');
        // Select a voice that has multiple languages
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Voice'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('Voice Display Name 1 (en-US)').last); // This voice has en-US, es-US, fr-CA
        await tester.pumpAndSettle();

        // Do not select a language explicitly

        await tester.tap(find.byIcon(Icons.save));
        await tester.pumpAndSettle();
        
        expect(find.text('Please select a language'), findsOneWidget);
        verifyNever(mockProfileService.createProfile(any));
      });
    });

    group('Voice/Language Selection Dynamics', () {
      testWidgets('changing selected voice updates available languages', (WidgetTester tester) async {
        await tester.pumpWidget(createEditProfilePageWidget());
        await tester.pumpAndSettle();

        // Select Voice 1
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Voice'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('Voice Display Name 1 (en-US)').last);
        await tester.pumpAndSettle();

        // Check languages for Voice 1
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Language'));
        await tester.pumpAndSettle();
        expect(find.text('en-US'), findsOneWidget);
        expect(find.text('es-US'), findsOneWidget);
        expect(find.text('fr-CA'), findsOneWidget);
        await tester.tap(find.text('en-US').last); // Close dropdown
        await tester.pumpAndSettle();

        // Change to Voice 2
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField && widget.decoration?.labelText == 'Voice'));
        await tester.pumpAndSettle();
        await tester.tap(find.text('Voice Display Name 2 (de-DE)').last);
        await tester.pumpAndSettle();
        
        // Check languages for Voice 2 (should auto-select primary if list changes)
        // The EditProfilePage logic automatically selects the first language (primary) if the old one is not valid.
        // So, de-DE should be selected.
        expect(find.widgetWithText(DropdownButtonFormField<String>, 'de-DE'), findsOneWidget);

        // Tap to open language dropdown for Voice 2
        await tester.tap(find.byWidgetPredicate((widget) => widget is DropdownButtonFormField<String> && widget.decoration?.labelText == 'Language'));
        await tester.pumpAndSettle();
        expect(find.text('de-DE'), findsOneWidget); // Primary locale for voice 2
        expect(find.text('en-US'), findsNothing); // Should not find languages from previous voice
        expect(find.text('es-US'), findsNothing);
      });
    });
  });
}

// Helper to add keys to sliders for easier finding, modify your EditProfilePage for this:
// In EditProfilePage:
// Slider(key: ValueKey('rate_slider'), ...)
// Slider(key: ValueKey('pitch_slider'), ...)
